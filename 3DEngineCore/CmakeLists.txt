cmake_minimum_required(VERSION 3.16 FATAL_ERROR)

set(ENGINE_PROJECT_NAME 3DEngineCore)

set(ENGINE_PUBLIC_INCLUDES
	includes/3DEngineCore/Application.hpp
	includes/3DEngineCore/Log.hpp
	includes/3DEngineCore/Window.hpp
	
	includes/EngineEventProcessing/EventsDispatcher.hpp
	includes/EngineEventProcessing/IEventsDispatcher.hpp
	includes/EngineEventProcessing/WindowEventsExecutor.hpp
	includes/EngineEventProcessing/IEventsExecutor.hpp	
	includes/EngineEventProcessing/WindowEventsManager.hpp
	includes/EngineEventProcessing/IEventsManager.hpp
	includes/EngineEventProcessing/IEvent.hpp
	
	includes/EngineEventProcessing/WindowEvents/WindowClosedEvent.hpp
	includes/EngineEventProcessing/WindowEvents/WindowResizedEvent.hpp
	
	includes/Renderer/OpenGL/shaders/IShader.hpp
	includes/Renderer/OpenGL/shaders/ShaderProgram.hpp
	includes/Renderer/OpenGL/shaders/Shader.hpp
	
	includes/ResourceManagement/ShaderResourceManager.hpp
	includes/ResourceManagement/IResourceManager.hpp
	includes/ResourceManagement/IResourceManagementSystem.hpp
	includes/ResourceManagement/ResourceManagementSystem.hpp
	
	includes/System/FileSystem/IFileLoader.hpp
	includes/System/FileSystem/DiskFileLoader.hpp
	
	includes/Descriptors/RendererDesc/MeshDesc.hpp
	includes/Descriptors/RendererDesc/ShaderDesc.hpp
	includes/Descriptors/IDescriptor.hpp
	
	includes/Parser/JSON/IParserResource.hpp
	includes/Parser/JSON/MeshParser.hpp
	includes/Parser/JSON/ParserComposite.hpp
	includes/Parser/JSON/ShaderParser.hpp
	
)

set(ENGINE_PRIVATE_SOURCES
	src/3DEngineCore/Application.cpp
	src/3DEngineCore/Window.cpp	
	src/EngineEventProcessing/WindowEventsManager.cpp
	
	src/Renderer/OpenGL/shaders/ShaderProgram.cpp
	src/Renderer/OpenGL/shaders/Shader.cpp
		
	src/ResourceManagement/ShaderResourceManager.cpp
	src/ResourceManagement/ResourceManagementSystem.cpp
	
	src/System/FileSystem/DiskFileLoader.cpp

	src/Parser/JSON/MeshParser.cpp
	src/Parser/JSON/ShaderParser.cpp
)

add_library(${ENGINE_PROJECT_NAME} STATIC 
	${ENGINE_PUBLIC_INCLUDES}
	${ENGINE_PRIVATE_SOURCES}
) 

add_subdirectory(../external/glfw ${CMAKE_CURRENT_BINARY_DIR}/glfw)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE glfw)

add_subdirectory(../external/spdlog ${CMAKE_CURRENT_BINARY_DIR}/spdlog)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE spdlog)

add_subdirectory(../external/glad ${CMAKE_CURRENT_BINARY_DIR}/glad)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE glad)

target_include_directories(${ENGINE_PROJECT_NAME} PUBLIC includes)

target_compile_features(${ENGINE_PROJECT_NAME} PUBLIC cxx_std_17)



set(IMGUI_INCLUDES
	../external/imgui/imgui.h
	../external/imgui/backends/imgui_impl_opengl3.h
	../external/imgui/backends/imgui_impl_glfw.h
)

set(IMGUI_SOURCES
	../external/imgui/imgui.cpp
	../external/imgui/backends/imgui_impl_opengl3.cpp
	../external/imgui/backends/imgui_impl_glfw.cpp
	../external/imgui/imgui_demo.cpp
	../external/imgui/imgui_draw.cpp
	../external/imgui/imgui_tables.cpp
	../external/imgui/imgui_widgets.cpp	
)

add_library(imgui STATIC 
	${IMGUI_INCLUDES}
	${IMGUI_SOURCES}
) 	

target_include_directories(imgui PUBLIC ../external/imgui)
target_include_directories(imgui PUBLIC ../external)
target_link_libraries(imgui PRIVATE glfw glad)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE imgui)
include_directories(../external/rapidjson/include)